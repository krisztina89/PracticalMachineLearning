Writing the submission files to `predictionAssignment/answers`.
```{r}
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
```
```{r, echo=FALSE}
---
title: "Coursera Practical Machine Learning Prediction Project"
author: "Krisztina Ratz"
date: "2016. mÃ¡jus 12."
output: html_document
---
```{r, echo=FALSE}
message(sprintf("Run time: %s\nR version: %s", Sys.time(), R.Version()$version.string))
```
> **Introduction**
> Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
> **Data **
> The data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. If you use     the document you create for this class for any purpose please cite them as they have been very generous   in allowing their data to be used for this kind of assignment.
> The training data for this project are available here:
> https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
> The test data are available here:
> https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
> **Requirements**
> The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.
> 1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).
> 2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.
> **Reproducibility **
> Due to security concerns with the exchange of R code, your code will not be run during the evaluation by your classmates. Please be sure that if they download the repo, they will be able to view the compiled HTML version of your analysis.
# Preparing the training and the testing datasets
First loading the training data into a data table.
```{r}
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
```
Then loading the testing data into a data table.
```{r}
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
```
First question is that Which variables are fully populated in the test dataset?
The belt, arm, dumbbell, and forearm variables do not have any missing values in the test dataset they therefore will be the predictor candidates.
```{r}
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
```
Next step is subsetting the primary dataset to include only the above mentioned predictor candidates and the outcome variable, calles `classe`.
```{r}
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
```
Then making `classe` into a factor.
```{r}
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
```
Then splitting the dataset into 60% and 40%, respectively between the training probing dataset.
```{r}
library(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
```
Then preprocessing the prediction variables by centering and scaling.
```{r}
X <- DTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
```
Then applying also the centering and scaling to the probing dataset.
```{r}
X <- DProbe[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DProbeCS <- data.table(data.frame(classe = DProbe[, classe], XCS))
```
Then the next step is checking for near zero variance.
```{r}
nzv <- nearZeroVar(DTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
```
Then examining groups of prediction variables.
```{r histGroup}
histGroup <- function (data, regex) {
col <- grep(regex, names(data))
col <- c(col, which(names(data) == "classe"))
library(reshape2)
n <- nrow(data)
DMelted <- melt(data[, col, with=FALSE][, rownum := seq(1, n)], id.vars=c("rownum", "classe"))
library(ggplot2)
ggplot(DMelted, aes(x=classe, y=value)) +
geom_violin(aes(color=classe, fill=classe), alpha=1/2) +
#     geom_jitter(aes(color=classe, fill=classe), alpha=1/10) +
#     geom_smooth(aes(group=1), method="gam", color="black", alpha=1/2, size=2) +
facet_wrap(~ variable, scale="free_y") +
scale_color_brewer(palette="Spectral") +
scale_fill_brewer(palette="Spectral") +
labs(x="", y="") +
theme(legend.position="none")
}
histGroup(DTrainCS, "belt")
histGroup(DTrainCS, "[^(fore)]arm")
histGroup(DTrainCS, "dumbbell")
histGroup(DTrainCS, "forearm")
```
# Training a prediction model
As part of training the prediction model random forest will be used, therefore the out of sample error should be small. Then the error will be estimated using the 40% probing sample.
First step is setting up the parallel clusters.
```{r}
library(parallel)
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
```
Then the control parameters.
```{r}
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
```
Next step is fitting model over the tuning parameters.
```{r}
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
```
then stopping the clusters.
```{r}
stopCluster(cl)
```
## Evaluating the model on the training dataset
```{r}
trainingModel
hat <- predict(trainingModel, DTrainCS)
confusionMatrix(hat, DTrain[, classe])
```
## Evaluating the model on the probing dataset
```{r}
hat <- predict(trainingModel, DProbeCS)
confusionMatrix(hat, DProbeCS[, classe])
```
## Displaying the final model
```{r finalModel}
varImp(trainingModel)
trainingModel$finalModel
```
**The estimated error rate is less than 1%.**
Then saving training model object for future use.
```{r}
save(trainingModel, file="trainingModel.RData")
```
# Predicting on the test data
First step is loading the training model.
```{r}
load(file="trainingModel.RData", verbose=TRUE)
```
then getting predictions and evaluating.
```{r}
DTestCS <- predict(preProc, DTest[, predCandidates, with=FALSE])
hat <- predict(trainingModel, DTestCS)
DTest <- cbind(hat , DTest)
subset(DTest, select=names(DTest)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(DTest), invert=TRUE)])
```
## Submitting to Coursera Prediction Project
Writing the submission files to `predictionAssignment/answers`.
```{r}
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
```
function (x)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("data.table")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("curl")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
```{r}
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
```
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
library(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
install.packages("caret")
library(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
library(caret)
seed <- as.numeric(as.Date("2016-05-12"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
```{r}
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
```
Then loading the testing data into a data table.
```{r}
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
```
First question is that Which variables are fully populated in the test dataset?
The belt, arm, dumbbell, and forearm variables do not have any missing values in the test dataset they therefore will be the predictor candidates.
```{r}
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
```
Next step is subsetting the primary dataset to include only the above mentioned predictor candidates and the outcome variable, calles `classe`.
```{r}
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
```
Then making `classe` into a factor.
```{r}
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
```
Then splitting the dataset into 60% and 40%, respectively between the training probing dataset.
```{r}
library(caret)
seed <- as.numeric(as.Date("2016-05-12"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
```
Then preprocessing the prediction variables by centering and scaling.
```{r}
X <- DTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
```
Then applying also the centering and scaling to the probing dataset.
```{r}
X <- DProbe[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DProbeCS <- data.table(data.frame(classe = DProbe[, classe], XCS))
```
Then the next step is checking for near zero variance.
```{r}
nzv <- nearZeroVar(DTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
```
Then examining groups of prediction variables.
```{r histGroup}
histGroup <- function (data, regex) {
col <- grep(regex, names(data))
col <- c(col, which(names(data) == "classe"))
library(reshape2)
n <- nrow(data)
DMelted <- melt(data[, col, with=FALSE][, rownum := seq(1, n)], id.vars=c("rownum", "classe"))
library(ggplot2)
ggplot(DMelted, aes(x=classe, y=value)) +
geom_violin(aes(color=classe, fill=classe), alpha=1/2) +
#     geom_jitter(aes(color=classe, fill=classe), alpha=1/10) +
#     geom_smooth(aes(group=1), method="gam", color="black", alpha=1/2, size=2) +
facet_wrap(~ variable, scale="free_y") +
scale_color_brewer(palette="Spectral") +
scale_fill_brewer(palette="Spectral") +
labs(x="", y="") +
theme(legend.position="none")
}
histGroup(DTrainCS, "belt")
histGroup(DTrainCS, "[^(fore)]arm")
histGroup(DTrainCS, "dumbbell")
histGroup(DTrainCS, "forearm")
```
# Training a prediction model
As part of training the prediction model random forest will be used, therefore the out of sample error should be small. Then the error will be estimated using the 40% probing sample.
First step is setting up the parallel clusters.
```{r}
library(parallel)
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
```
Then the control parameters.
```{r}
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
```
Next step is fitting model over the tuning parameters.
```{r}
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
```
then stopping the clusters.
```{r}
stopCluster(cl)
```
## Evaluating the model on the training dataset
```{r}
trainingModel
hat <- predict(trainingModel, DTrainCS)
confusionMatrix(hat, DTrain[, classe])
```
## Evaluating the model on the probing dataset
```{r}
hat <- predict(trainingModel, DProbeCS)
confusionMatrix(hat, DProbeCS[, classe])
```
## Displaying the final model
```{r finalModel}
varImp(trainingModel)
trainingModel$finalModel
```
**The estimated error rate is less than 1%.**
Then saving training model object for future use.
```{r}
save(trainingModel, file="trainingModel.RData")
```
# Predicting on the test data
First step is loading the training model.
```{r}
load(file="trainingModel.RData", verbose=TRUE)
```
then getting predictions and evaluating.
```{r}
DTestCS <- predict(preProc, DTest[, predCandidates, with=FALSE])
hat <- predict(trainingModel, DTestCS)
DTest <- cbind(hat , DTest)
subset(DTest, select=names(DTest)[grep("belt|[^(fore)]arm|dumbbell|forearm", names(DTest), invert=TRUE)])
```
## Submitting to Coursera Prediction Project
Writing the submission files to `predictionAssignment/answers`.
```{r}
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(hat)
```
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
setwd("D:/Coursera/Practical Machine Learning")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("data.table")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("curl")
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
library(caret)
seed <- as.numeric(as.Date("2016-05-12"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
install.packages("caret")
library(caret)
seed <- as.numeric(as.Date("2016-05-12"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
X <- DTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
X <- DProbe[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DProbeCS <- data.table(data.frame(classe = DProbe[, classe], XCS))
nzv <- nearZeroVar(DTrainCS, saveMetrics=TRUE)
if (any(nzv$nzv)) nzv else message("No variables with near zero variance")
histGroup <- function (data, regex) {
col <- grep(regex, names(data))
col <- c(col, which(names(data) == "classe"))
library(reshape2)
n <- nrow(data)
DMelted <- melt(data[, col, with=FALSE][, rownum := seq(1, n)], id.vars=c("rownum", "classe"))
library(ggplot2)
ggplot(DMelted, aes(x=classe, y=value)) +
geom_violin(aes(color=classe, fill=classe), alpha=1/2) +
#     geom_jitter(aes(color=classe, fill=classe), alpha=1/10) +
#     geom_smooth(aes(group=1), method="gam", color="black", alpha=1/2, size=2) +
facet_wrap(~ variable, scale="free_y") +
scale_color_brewer(palette="Spectral") +
scale_fill_brewer(palette="Spectral") +
labs(x="", y="") +
theme(legend.position="none")
}
histGroup(DTrainCS, "belt")
histGroup(DTrainCS, "[^(fore)]arm")
histGroup(DTrainCS, "dumbbell")
histGroup(DTrainCS, "forearm")
library(parallel)
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
install.packages("doParallel")
library(parallel)
library(doParallel)
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
ctrl <- trainControl(classProbs=TRUE,
savePredictions=TRUE,
allowParallel=TRUE)
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
install.packages("e1071")
method <- "rf"
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
hat <- predict(trainingModel, DTrainCS)
confusionMatrix(hat, DTrain[, classe])
trainingModel
hat <- predict(trainingModel, DTrainCS)
confusionMatrix(hat, DTrain[, classe])
trainingModel
hat <- predict(trainingModel, DTrainCS)
confusionMatrix(hat, DTrain[, classe])
install.packages("devtools")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='krisztina89', token='80120CBACBA866B7F092CD65483292BF', secret='S99k4jFA7iGCMmnq1jmDpeMbTflwrhSDz8qyUjHI')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
install.packages(c('ggplot2', 'shiny'))
install.packages(c('ggplot2', 'shiny'))
